1. What is distributed system
2. use case (computation and storage)
3. why we need (give example of company) exmplain vertical scale and horizontal scale
4. Expectation 

5. Different implementation of distributes system
	master-slave:
	-------------
		The master is responsible to make the important decisions and then to coordinate with all the slave nodes in order to accomplish the task. Typically, the master is used for the WRITE operations, while the slaves are used for the READ operations. Also, the master is responsible to ensure consistency among the slaves. One drawback of this architecture is that if the master node goes down, it will affect the working of all the slave nodes. In order to mitigate this, redundancy is added at the server level by adding a standby master. The examples of master-slave architecture are as follows:

 

When MySQL-Postgres is scaled or shared, it behaves in the master-slave order.

Similarly, MongoDB follows the master-slave model in the NoSQL world.

Hadoop makes use of the master-slave model for storage (HDFS) as well as data processing (MapReduce).

Apache Airflow (a pipeline automation tool) makes use of a distributed master-slave architecture by using a scheduler as a master node and workers as the slave nodes.

 

By now, you should have gained a good understanding of the master-slave architecture. Watch the next video to learn more about the master-master architecture, which is another-widely used architecture in the distributed systems at present.

  	master-master:
  	--------------
  	As explained in the video, in the master-master architecture, all the nodes are equally responsible to perform the given tasks and there are no ‘masters’ as such.

Master-Master Architecture
Master-Master Architecture
 

Hence, in this type of architecture, all the nodes are the same and they maintain information about the others by using different communication protocols. The data is equally shared among all the nodes and is distributed by means of consistent hashing. The client can connect to any of the nodes for READ or WRITE irrespective of whether the data is present in that node or not.

 

Since all the nodes are equal, they can be easily replaced in case of failure. This makes the model fault-tolerant easily. But, a drawback is that there is no central coordinator in the master-master model, which makes it less consistent.

 

A few examples that leverage the master-master architecture are as follows:

Cassandra: A NoSQL database with the master-master architecture

DynamoDB: Amazon’s NoSQL database system

Elasticsearch: An open-sourced distributed search engine

 

In the next segment, you will learn about the challenges faced in the implementation of the distributed systems.

 

